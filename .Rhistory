pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
# outFile
outFile = 'exp_figures'
# analysis sub-functions
source('load.R')
source('helperFxs.R')
library("ggplot2")
library('dplyr')
source("plotTheme.R")
source("wtwSettings.R")
# load all data
allData = load()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
#
# control which individual-level plots to generate
plotScheduledDelays = F
plotTrialwiseData = F
plotKMSC = F
plotRT = F
plotWTW = F
plotTimeEarnings = F
plotTrialEarnings = F
# initialize outputs, organised by block
grpAUC = numeric(length =n * 2)
earningsByBlock = numeric(length= n * 2)
condByBlock = vector(length= n * 2)
FunctionByBlock = vector(length= n * 2)
wtw = matrix(NA, 9001, n * 2)
cumEarn = matrix(NA, 9001, n * 2)
# para for km analysis
# sc_rising1 = matrix(NA, nrow=n, ncol=length(kmGrid))
# sc_falling1 = matrix(NA, nrow=n, ncol=length(kmGrid))
# sc_rising2 = matrix(NA, nrow=n, ncol=length(kmGrid))
# sc_falling2 = matrix(NA, nrow=n, ncol=length(kmGrid))
# earningsHP = numeric(length=n)
# earningsLP = numeric(length=n)
# aucHP = numeric(length=n)
# aucLP = numeric(length=n)
# descriptive statistics for individual subjects and blocks
for (sIdx in 1:n) {
thisID = allIDs[sIdx]
# pull this subject's data
for (bkIdx in 1:2){
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, Cond %s, Fun %s)',thisID, thisCond, thisFunction)
#
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
tGrid = seq(0, blockSecs, by = 0.1)
#  summarise Cond and Fun in this block
if(bkIdx == 1){condByBlock[sIdx*2 - 1] = thisCond}
if(bkIdx == 2){condByBlock[sIdx*2] = thisCond}
if(bkIdx == 1){FunctionByBlock[sIdx*2 - 1] = thisFunction}
if(bkIdx == 2){FunctionByBlock[sIdx*2] = thisFunction}
# summarise earnings in this block
if(bkIdx == 1){earningsByBlock[sIdx*2 - 1] = sum(thisTrialData$trialEarnings)}
if(bkIdx == 2){earningsByBlock[sIdx*2] = sum(thisTrialData$trialEarnings)}
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
}
# survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
if(bkIdx == 1){grpAUC[sIdx*2 -1] = kmscResults[['auc']]}
if(bkIdx == 2){grpAUC[sIdx*2] = kmscResults[['auc']]}
# save the full AUC in the appropriate place
# if (thisCond=='rising' & bkIdx<=2) {sc_rising1[sIdx,] = kmscResults[['kmOnGrid']]}
# if (thisCond=='falling' & bkIdx<=2) {sc_falling1[sIdx,] = kmscResults[['kmOnGrid']]}
# if (thisCond=='rising' & bkIdx>=3) {sc_rising2[sIdx,] = kmscResults[['kmOnGrid']]}
# if (thisCond=='falling' & bkIdx>=3) {sc_falling2[sIdx,] = kmscResults[['kmOnGrid']]}
#
# WTW time series - for an individual block.
wtwCeiling = tMax
# (e.g., 2 perfectly patient individuals could have different results depending what max time they got)
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
if(bkIdx == 1) wtw[,sIdx * 2 -1] = wtwtsResults else wtw[,sIdx * 2] = wtwtsResults
# ***Other possible metrics
#     width or inflection point of the KMSC (sigmoid fit?)
#     slope or lower bound of the WTW function. spline fit?
#     2nd-half AUC
# calculate timeEarnings
timeEarnings = getTimeEarnings(thisTrialData, tGrid, label, plotTimeEarnings)
if(bkIdx == 1) cumEarn[,sIdx * 2 -1] = timeEarnings else cumEarn[,sIdx * 2] = timeEarnings
plotData = data.frame(trialNum = thisTrialData$trialNum,
cumEarnings = cumsum(thisTrialData$trialEarnings))
if(plotTrialEarnings){
p = ggplot(plotData, aes(trialNum, cumEarnings)) + geom_line()
print(p)
}
# wait for input before continuing, if individual plots were requested
if (any(plotScheduledDelays, plotTrialwiseData, plotKMSC, plotRT, plotWTW, plotTimeEarnings, plotTrialEarnings)) {
readline(prompt = paste('subject',thisID, "block", bkIdx, '(hit ENTER to continue)'))
graphics.off()
}
} # loop over blocks
}
# organize groupdata
groupData = data.frame(id = rep(allIDs, each = 2), blockNum = rep(c(1,2), n),
cbal = rep(hdrData$Cbal, each = 2), condition = factor(condByBlock, levels = c('HP', 'LP')),
trialFun = FunctionByBlock, AUC = grpAUC,
totalEarnings = earningsByBlock)
save(groupData, file = 'expData/groupData.RData')
nCombList = which(groupData$totalEarnings > 400 & groupData$condition == 'HP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks$LP, size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
tMax
which(groupData$totalEarnings > 400 & groupData$condition == 'HP')
nCombList = which(groupData$AUC <= 6 & groupData$AUC >= 2 & groupData$condition == 'LP')
nCombList = which(groupData$totalEarnings > 380 & groupData$condition == 'HP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks$LP, size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
plotKMSC
plotKMSC= T
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks$LP, size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
nCombList = which(groupData$AUC <= 6 & groupData$AUC >= 2 & groupData$condition == 'LP')
nCombList = which(groupData$totalEarnings > 380 & groupData$condition == 'HP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[thisCond]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
nCombList = which(groupData$AUC <= 6 & groupData$AUC >= 2 & groupData$condition == 'LP')
nCombList = which(groupData$totalEarnings > 380 & groupData$condition == 'HP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[thisCond]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
nCombList = which(groupData$AUC <= 6 & groupData$AUC >= 2 & groupData$condition == 'LP')
nCombList = which(groupData$totalEarnings < 200 & groupData$condition == 'HP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[thisCond]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
nCombList = which(groupData$AUC <= 6 & groupData$AUC >= 2 & groupData$condition == 'LP')
nCombList = which(groupData$totalEarnings < 200 & groupData$condition == 'HP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[thisCond]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 2)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 2) + saveTheme +
xlab('HPAUC / s' ) + ylab('LPAUC / s')
fileName = sprintf('QStar_figures/responsiveness.pdf')
ggsave(fileName, width = 8, height = 8)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3) + saveTheme +
xlab('HPAUC / s' ) + ylab('LPAUC / s')
fileName = sprintf('QStar_figures/responsiveness.pdf')
ggsave(fileName, width = 8, height = 8)
l
rm(list = ls())
# outFile
outFile = 'QStar_figures'
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source('plotTheme.R')
source('wtwSettings.R')
# initialSpace
load('QStarData/initialSpace.RData')
####
load('QStarData/colpData.RData')
load('QStarData/rawWTW.RData')
load('QStarData/hdrData.RData')
####
plotData = rbind(as.data.frame(colpHPData[c(1,5,6,7)]),
as.data.frame(colpLPData[c(1,5,6,7)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
ggplot(plotData, aes(condition, wtw)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "wtwCompare.pdf")
ggsave(fileName, width = 12, height = 8)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3) + saveTheme +
xlab('HPAUC / s' ) + ylab('LPAUC / s')
fileName = sprintf('QStar_figures/responsiveness.pdf')
ggsave(fileName, width = 8, height = 8)
meanValues = c(apply(rawWTW$HP, MARGIN = 3, FUN = mean),
apply(rawWTW$LP, MARGIN = 3, FUN = mean))
stdValues = c(apply(rawWTW$HP, MARGIN = 3, FUN = sd),
apply(rawWTW$LP, MARGIN = 3, FUN = sd))
plotData = data.frame(meanValues, stdValues,
time = rep(tGrid, time = 2),
condition = rep(c('HP', 'LP'), each = length(tGrid)),
minValues = meanValues - stdValues / sqrt(dim(rawWTW$HP)[1]),
maxValues = meanValues + stdValues / sqrt(dim(rawWTW$HP)[1]))
ggplot(plotData, aes(time, meanValues, color = condition)) +
geom_ribbon(data = plotData[plotData$condition == 'HP',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_ribbon(data = plotData[plotData$condition == 'LP',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_line(size = 1) + xlab('Time in block / s') + ylab('WTW / s') + saveTheme
fileName = file.path(outFile, "wtwTimeSeries.pdf")
ggsave(fileName, width = 12, height = 8)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3, size = 5) + saveTheme +
xlab('HPAUC / s' ) + ylab('LPAUC / s')
fileName = sprintf('QStar_figures/responsiveness.pdf')
ggsave(fileName, width = 8, height = 8)
