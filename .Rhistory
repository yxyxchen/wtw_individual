# analysis sub-functions
source('loadData.R')
# load all data
allData = loadData()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
# analysis sub-functions
source('loadData.R')
# load all data
allData = loadData()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects./n')
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
# analysis sub-functions
source('load.R')
# load all data
allData = load()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
library(survival)
waitDuration = blockData$timeWaited
quitIdx = (blockData$trialEarnings == 0)
# analysis sub-functions
source('load.R')
# load all data
allData = load()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
rm(list = ls())
# analysis sub-functions
source('load.R')
# load all data
allData = load()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
# analysis sub-functions
source('helperFxs.R')
source('loadData.R')
library(survival)
#
# control which individual-level plots to generate
plotScheduledDelays = T
plotTrialwiseData = T
plotKMSC = T
plotRT = T
# initialize structures to hold group data
blockAUC = numeric(length=n)
# grpAUC = numeric(length=n)
grpAUC = matrix(NA, nrow=n, ncol=4)
earningsByBlock = matrix(NA, nrow=n, ncol=4)
kmGrid = seq(0, 20, by=0.1) # grid on which to average survival curves.
sc_rising1 = matrix(NA, nrow=n, ncol=length(kmGrid))
sc_falling1 = matrix(NA, nrow=n, ncol=length(kmGrid))
sc_rising2 = matrix(NA, nrow=n, ncol=length(kmGrid))
sc_falling2 = matrix(NA, nrow=n, ncol=length(kmGrid))
earningsHP = numeric(length=n)
earningsLP = numeric(length=n)
aucHP = numeric(length=n)
aucLP = numeric(length=n)
sIdx = 1
bkIdx = 1
library(survival)
waitDuration = blockData$timeWaited
quitIdx = (blockData$trialEarnings == 0)
# pull this subject's data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisCond = unique(thisTrialData$condition)
waitDuration = blockData$timeWaited
quitIdx = (blockData$trialEarnings == 0)
blockData = thisTrialData
tMax = 30 # time window for the survival analysis
# wait for input before continuing, if individual plots were requested
if (any(plotScheduledDelays, plotTrialwiseData, plotKMSC, plotRT)) {
readline(prompt = paste('subject',thisID,'(hit ENTER to continue)'))
}
waitDuration = blockData$timeWaited
quitIdx = (blockData$trialEarnings == 0)
blockData
View(blockData)
# fit the survival function
kmfit <- survfit(Surv(waitDuration, quitIdx, type='right') ~ 1,
type='kaplan-meier', conf.type='none', start.time=0, se.fit=FALSE)
# extract elements of the survival curve object (?survfit.object)
kmT = kmfit$time
kmF = kmfit$surv
kmT
kmF = kmfit$surv
kmF
length(kmF)
length(kmT)
plot(kmT, kmF)
kmT
kmT <- kmT[keepIdx]
kmF <- kmF[keepIdx]
keepIdx = kmT<=tMax
kmT <- kmT[keepIdx]
kmF <- kmF[keepIdx]
kmT <- c(kmT, tMax)
kmF <- c(kmF, tail(kmF,1))
plot(kmT, kmF)
plot(kmT, kmF, type='s', frame.plot=FALSE, xlab='Delay (s)', ylab='Survival rate',
main=sprintf('KMSC: subject %s (AUC = %1.1f)',blockLabel,auc), ylim=c(0,1), xlim=c(0,tMax))
kmOnGrid = vector()
grid
grid
grid = 0
1:length(grid)
kmOnGrid = vector()
for (gIdx in 1:length(grid)) {
g = grid[gIdx]
# use the last point where t is less than or equal to the current grid value
kmOnGrid[gIdx] = kmF[max(which(kmT<=g))]
}
rm(list = ls())
# analysis sub-functions
source('load.R')
# load all data
allData = load()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
sIdx = 1
bkIdx = 1
# pull this subject's data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisCond = unique(thisTrialData$condition)
label = sprintf('Subject %s, Block %d (Cbal %d)',thisID,bkIdx,hdrData$Cbal[sIdx])
# earnings in this block
earningsByBlock[sIdx, bkIdx] = sum(thisTrialData$trialEarnings)
# plot and summarize the distribution of scheduled delays
if (plotScheduledDelays) {
scheduledDelays(thisTrialData,label)
}
tMax = 30 # time window for the survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
# load all data
allData = load()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
analysis sub-functions
source('load.R')
# load all data
allData = load()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
sIdx = 1
bkIdx = 1
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisCond = unique(thisTrialData$condition)
label = sprintf('Subject %s, Block %d (Cbal %d)',thisID,bkIdx,hdrData$Cbal[sIdx])
# earnings in this block
earningsByBlock[sIdx, bkIdx] = sum(thisTrialData$trialEarnings)
tMax = 30 # time window for the survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
source('helperFxs.R')
# survival analysis
tMax = 30 # time window for the survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisCond = unique(thisTrialData$condition)
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisCond = unique(thisTrialData$condition)
label = sprintf('Subject %s, Block %d (Cbal %d)',thisID,bkIdx,hdrData$Cbal[sIdx])
# pull this subject's data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisCond = unique(thisTrialData$condition)
label = sprintf('Subject %s, Block %d (Cbal %d)',thisID,bkIdx,hdrData$Cbal[sIdx])
tMax = 30 # time window for the survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
plotKMSC = T
tMax = 30 # time window for the survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
blockData = thisTrialData;
library(survival)
waitDuration = blockData$timeWaited
quitIdx = (blockData$trialEarnings == 0)
waitDuration[!quitIdx] <- blockData$scheduledWait[!quitIdx]
# fit the survival function
kmfit <- survfit(Surv(waitDuration, quitIdx, type='right') ~ 1,
type='kaplan-meier', conf.type='none', start.time=0, se.fit=FALSE)
# extract elements of the survival curve object (?survfit.object)
kmT = kmfit$time
kmF = kmfit$surv
# add a point at zero
kmT = c(0, kmT)
kmF = c(1, kmF)
# keep only points up through tMax
keepIdx = kmT<=tMax
kmT <- kmT[keepIdx]
kmF <- kmF[keepIdx]
# extend the last value to exactly tMax
kmT <- c(kmT, tMax)
kmF <- c(kmF, tail(kmF,1))
# calculate auc
auc <- sum(diff(kmT) * head(kmF,-1))
plot(kmT, kmF, type='s', frame.plot=FALSE, xlab='Delay (s)', ylab='Survival rate',
main=sprintf('KMSC: subject %s (AUC = %1.1f)',blockLabel,auc), ylim=c(0,1), xlim=c(0,tMax))
blockLabel = label
label
plot(kmT, kmF, type='s', frame.plot=FALSE, xlab='Delay (s)', ylab='Survival rate',
main=sprintf('KMSC: subject %s (AUC = %1.1f)',blockLabel,auc), ylim=c(0,1), xlim=c(0,tMax))
kmOnGrid = vector()
for (gIdx in 1:length(grid)) {
g = grid[gIdx]
# use the last point where t is less than or equal to the current grid value
kmOnGrid[gIdx] = kmF[max(which(kmT<=g))]
}
gIdx = 1
g = grid[gIdx]
kmT
kmGrid = seq(0, 20, by=0.1) # grid on which to average survival curves.
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
grid= kmGrid
kmOnGrid = vector()
for (gIdx in 1:length(grid)) {
g = grid[gIdx]
# use the last point where t is less than or equal to the current grid value
kmOnGrid[gIdx] = kmF[max(which(kmT<=g))]
}
g
grid
