ggsave(fileName, width = 16, height = 8)
}
############ look at actionValues group by totalEanrings #########
perc = 0.1
nUse= floor(nComb* perc);
rankings = c('Top', 'Bottom')
for(c in 1 : 2){
cond = conditions[c]
condName = conditionNames[c]
condColor = conditionColors[c]
if(condName == 'HP'){
hdrData = hdrHPData
inputData = colpHPData
}else{
hdrData = hdrLPData
inputData = colpLPData
}
for(r in 1:2){
ranking = rankings[r]
tempt = order(inputData$totalEarnings, decreasing = (ranking == 'Top'))
UseVaWaits = inputData$vaWaits[tempt[1:nUse],]
UseVaQuits= inputData$vaQuits[tempt[1:nUse],]
# plot
vas = cbind(UseVaWaits, UseVaQuits)
meanValues = apply(vas, FUN = function(x) mean(x[!is.na(x)]), MARGIN = 2)
stdValues = apply(vas, FUN = function(x) sd(x[!is.na(x)]), MARGIN = 2)
maxValues = meanValues + stdValues
minValues = meanValues - stdValues
actions = factor(rep(c('wait', 'quit'), each = hdrData$nTimeStep), levels = c('wait', 'quit'))
plotData = data.frame(meanValues, stdValues, maxValues, minValues,
timeSteps = rep(seq(1,hdrData$nTimeStep),2), actions )
graphics.off()
titleText = sprintf("%s, %s%s total earnings",condName, ranking, percent(perc))
ggplot(plotData, aes(timeSteps, meanValues, linetype = actions)) +
geom_ribbon(data = plotData[plotData$actions == 'wait',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_ribbon(data = plotData[plotData$actions == 'quit',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_line(color = conditionColors[c], size = 1) + xlab('Time step') + ylab('Action value') + ggtitle(titleText)+ saveTheme +
scale_linetype_discrete(name = "Action")
#coord_cartesian(ylim=c(-2,5))
fileName = sprintf('%s/actionValue%s%s.pdf', outFile, condName, ranking)
ggsave(file = fileName, width = 10, height = 6)
}
}
nUse=
nUse
nComb
nValue^nPara
nPara = 2
nValue = 6
nComb =  nValue^nPara
paraNames = c("tau", "gamma")
tMax = otherPara[['tMax']]
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.33, 1, 3, 9, 27, 81), each = nValue) # tau
initialSpace[,2] = rep(seq(0.05, 0.95, length.out = 6), nValue) # gamma
outFile = 'QStarData'
fileName = sprintf('%s/initialSpace.RData', outFile)
save(initialSpace,nPara, nValue, paraNames,nComb, file = fileName)
rm(list =ls())
# this script is for
# outFile
outFile = 'QStar_figures'
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source('plotTheme.R')
source('wtwSettings.R')
# initialSpace
load( file = 'QStarData/initialSpace.RData')
####
load('QStarData/colpData.RData')
load('QStarData/rawWTW.RData')
load('QStarData/hdrData.RData')
####
####### plot distribution of totalEarnings
plotData = data.frame(totalEarnings = c(colpHPData$totalEarnings, colpLPData$totalEarnings),
condition = rep(c("HP", "LP"), each = nComb), tau = initialSpace[,1],
gamma = initialSpace[,2]
)
ggplot(plotData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = file.path(outFile, 'earningSml.pdf')
ggsave(fileName, width = 16, height = 8)
# calculate range
summarise(group_by(plotData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
############ summarise para effects on total earnings ###########
paraValues = 1 : nValue
summaryData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
summaryData$paraNames = factor(summaryData$paraNames, levels = paraNames)
# summarise mu and sd
mu = rep(NA, nrow(summaryData))
std = rep(NA, nrow(summaryData))
tempt = summarise(group_by(plotData, condition, tau), mu = mean(totalEarnings), std = sd(totalEarnings))
mu[1: (nValue * 2)] = tempt$mu; std[1: (nValue * 2)]= tempt$std
tempt = summarise(group_by(plotData, condition, gamma), mu = mean(totalEarnings), std = sd(totalEarnings))
mu[(nValue * 2 + 1): (nValue * 4)] = tempt$mu; std[(nValue * 2 + 1): (nValue * 4)]= tempt$std
summaryData$mu = mu
summaryData$std = std
summaryData$ymin = mu - std
summaryData$ymax = mu + std
# plot for HP
for(c in 1:2){
cond = conditionNames[c]
ggplot(summaryData[summaryData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = ymin, ymax = ymax), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = file.path(outFile, sprintf("paraEffect%s.pdf", cond))
ggsave(fileName, width = 16, height = 8)
}
############ look at actionValues group by totalEanrings #########
perc = 0.1
nUse= floor(nComb* perc);
rankings = c('Top', 'Bottom')
for(c in 1 : 2){
cond = conditions[c]
condName = conditionNames[c]
condColor = conditionColors[c]
if(condName == 'HP'){
hdrData = hdrHPData
inputData = colpHPData
}else{
hdrData = hdrLPData
inputData = colpLPData
}
for(r in 1:2){
ranking = rankings[r]
tempt = order(inputData$totalEarnings, decreasing = (ranking == 'Top'))
UseVaWaits = inputData$vaWaits[tempt[1:nUse],]
UseVaQuits= inputData$vaQuits[tempt[1:nUse],]
# plot
vas = cbind(UseVaWaits, UseVaQuits)
meanValues = apply(vas, FUN = function(x) mean(x[!is.na(x)]), MARGIN = 2)
stdValues = apply(vas, FUN = function(x) sd(x[!is.na(x)]), MARGIN = 2)
maxValues = meanValues + stdValues
minValues = meanValues - stdValues
actions = factor(rep(c('wait', 'quit'), each = hdrData$nTimeStep), levels = c('wait', 'quit'))
plotData = data.frame(meanValues, stdValues, maxValues, minValues,
timeSteps = rep(seq(1,hdrData$nTimeStep),2), actions )
graphics.off()
titleText = sprintf("%s, %s%s total earnings",condName, ranking, percent(perc))
ggplot(plotData, aes(timeSteps, meanValues, linetype = actions)) +
geom_ribbon(data = plotData[plotData$actions == 'wait',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_ribbon(data = plotData[plotData$actions == 'quit',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_line(color = conditionColors[c], size = 1) + xlab('Time step') + ylab('Action value') + ggtitle(titleText)+ saveTheme +
scale_linetype_discrete(name = "Action")
#coord_cartesian(ylim=c(-2,5))
fileName = sprintf('%s/actionValue%s%s.pdf', outFile, condName, ranking)
ggsave(file = fileName, width = 10, height = 6)
}
}
p1 = matrix(c(colpHPData[[1]],colpHPData[[5]], colpHPData[[6]],colpHPData[[7]]),
ncol = 4)
p2 = matrix(c(colpLPData[[1]],colpLPData[[5]], colpLPData[[6]],colpLPData[[7]]),
ncol = 4)
plotData = rbind(p1, p2)
plotData = as.data.frame(plotData)
colnames(plotData) = names(colpHPData)[c(1,5,6,7)]
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare.pdf")
ggsave(fileName, width = 12, height = 8)
plotData2 = plotData[rep(initialSpace[,2] == 24, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP2.pdf")
ggsave(fileName, width = 6, height = 4)
#### wtw
ggplot(plotData, aes(condition, wtw)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "wtwCompare.pdf")
ggsave(fileName, width = 12, height = 8)
p1 = matrix(c(colpHPData[[1]],colpHPData[[5]], colpHPData[[6]],colpHPData[[7]]),
ncol = 4)
p2 = matrix(c(colpLPData[[1]],colpLPData[[5]], colpLPData[[6]],colpLPData[[7]]),
ncol = 4)
plotData = rbind(p1, p2)
plotData = as.data.frame(plotData)
colnames(plotData) = names(colpHPData)[c(1,5,6,7)]
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
p1 = matrix(c(colpHPData[[1]],colpHPData[[5]], colpHPData[[6]],colpHPData[[7]]),
ncol = 4)
View(p1)
p2 = matrix(c(colpLPData[[1]],colpLPData[[5]], colpLPData[[6]],colpLPData[[7]]),
ncol = 4)
plotData = rbind(p1, p2)
View(colpLPData)
rm(list = ls())
library("dplyr")
library("tidyr")
library('ggplot2')
library('scales')
source('plotTheme.R')
source('wtwSettings.R')
source('helperFxs.R')
## outFile
outFile = 'QStarData'
############# load raw data
load('QStarData/rawData.RData')
load('QstarData/hdrData.RData')
############ calculate colpData
# colpTrialEarnings
colpTrialEarnings = vector(mode = "list", 2)
colpTotalEarnings = vector(mode = "list", 2)
for(c in 1 : 2){
cond = conditions[c];
condName = conditionNames[c];
if(condName == "HP") inputData = rawHPData else inputData = rawLPData
colpTrialEarnings[[condName]] =
apply(inputData$trialEarnings, MARGIN = c(1,3), FUN = mean)
colpTotalEarnings[[condName]] = apply(colpTrialEarnings[[condName]],
MARGIN = 1, FUN = sum)
}
# colpVaWaits & colpVaQuits
colpVaWaits = vector(mode = "list", 2)
colpVaQuits = vector(mode = "list", 2)
for(c in 1 : 2){
cond = conditions[c];
condName = conditionNames[c];
if(condName == "HP") inputData = rawHPData else inputData = rawLPData
colpVaWaits[[condName]]  =  apply(inputData$vaWaits, MARGIN = c(1, 3),
FUN = function(x) mean(x[!is.na(x)]))
colpVaQuits[[condName]]  =  apply(inputData$vaQuits, MARGIN = c(1, 3),
FUN = function(x) mean(x[!is.na(x)]))
}
###### AUC data #####
colpAUC = list()
rawWTW = list()
for(c in 1 : 2){
cond = conditions[c];
condName = conditionNames[c];
# input
if(condName == "HP") inputData = rawHPData else inputData = rawLPData
tMax = tMaxs[c]
trialTick = trialTicks[[condName]]
# dim
nComb = dim(inputData$timeWaited)[1]
nRep = dim(inputData$timeWaited)[2]
# temporary output
output = matrix(NA, nComb, nRep)
wtwResult = array(dim = c(nComb, nRep, length(tGrid)))
for(i in 1 : nComb){
for(j in 1 : nRep){
waitDuration = inputData$timeWaited[i, j, ]
rewardDelay = inputData$rewardDelays[i, j, ]
quitIdx = (inputData$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
output[i, j] = kmscSimple(waitDuration, quitIdx, tMax, trialTick)$auc
wtwResult[i, j, ] = wtwTSSimple(waitDuration, quitIdx, tGrid, tMax)
} # end of comb
}# end of condition
colpAUC[[condName]] = rowSums(output) / ncol(output)
rawWTW[[condName]] = wtwResult
}
### timeWaited
endTicks = apply(rawLPData$rewardDelays, MARGIN = c(1,2),
FUN = function(x) match(0, x) - 1)
colpTimeWaited = list()
for(c in 1:2){
condName = conditionNames[c]
if(condName == 'HP') inputData = rawHPData else  inputData = rawLPData
output = matrix(NA, nrow = dim(rawHPData$ws)[1], ncol = 5)
for(i in 1 : length(colpHPData$AUC)){
for(j in 1 : 5){
timeWaited = inputData[['timeWaited']][i, j, 1 : endTicks[i,j]]
output[i, j] = mean(timeWaited[!is.na(timeWaited)])
}
}
output = rowSums(output) / ncol(output)
if(condName == 'HP') colpTimeWaited$HP = output else colpTimeWaited$LP = output
}
# quickQuit
### timeWaited
endTicks = apply(rawLPData$rewardDelays, MARGIN = c(1,2),
FUN = function(x) match(0, x) - 1)
colpTimeWaited = list()
endTicks = apply(rawLPData$rewardDelays, MARGIN = c(1,2),
FUN = function(x) match(0, x) - 1)
colpTimeWaited = list()
for(c in 1:2){
condName = conditionNames[c]
if(condName == 'HP') inputData = rawHPData else  inputData = rawLPData
output = matrix(NA, nrow = dim(rawHPData$ws)[1], ncol = 5)
for(i in 1 : dim(rawHPData$ws)[1]){
for(j in 1 : 5){
timeWaited = inputData[['timeWaited']][i, j, 1 : endTicks[i,j]]
output[i, j] = mean(timeWaited[!is.na(timeWaited)])
}
}
output = rowSums(output) / ncol(output)
if(condName == 'HP') colpTimeWaited$HP = output else colpTimeWaited$LP = output
}
# quickQuit
### organize colpHPData
colpHPData = list(totalEarnings = colpTotalEarnings$HP,
trialEarnings = colpTrialEarnings$HP,
vaQuits = colpVaQuits$HP,
vaWaits = colpVaWaits$HP,
AUC = colpAUC$HP,
timeWaited = colpTimeWaited[['HP']],
wtw = apply(rawWTW$HP, MARGIN = 1, mean))
colpLPData = list(totalEarnings = colpTotalEarnings$LP,
trialEarnings = colpTrialEarnings$LP,
vaQuits = colpVaQuits$LP,
vaWaits = colpVaWaits$LP,
AUC = colpAUC$LP,
timeWaited = colpTimeWaited[['LP']],
wtw = apply(rawWTW$LP, MARGIN = 1, mean)
)
outFile = 'QStarData'
fileName = sprintf("%s/colpData.RData", outFile)
save('colpLPData', 'colpHPData', file = fileName )
fileName = sprintf("%s/rawWTW.RData", outFile)
save('rawWTW', file = fileName)
rm(list = ls())
# outFile
outFile = 'QStar_figures'
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source('plotTheme.R')
source('wtwSettings.R')
# initialSpace
load( file = 'QStarData/initialSpace.RData')
####
load('QStarData/colpData.RData')
load('QStarData/rawWTW.RData')
load('QStarData/hdrData.RData')
####
####### plot distribution of totalEarnings
plotData = data.frame(totalEarnings = c(colpHPData$totalEarnings, colpLPData$totalEarnings),
condition = rep(c("HP", "LP"), each = nComb), tau = initialSpace[,1],
gamma = initialSpace[,2]
)
ggplot(plotData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = file.path(outFile, 'earningSml.pdf')
ggsave(fileName, width = 16, height = 8)
# calculate range
summarise(group_by(plotData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
############ summarise para effects on total earnings ###########
paraValues = 1 : nValue
summaryData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
summaryData$paraNames = factor(summaryData$paraNames, levels = paraNames)
# summarise mu and sd
mu = rep(NA, nrow(summaryData))
std = rep(NA, nrow(summaryData))
tempt = summarise(group_by(plotData, condition, tau), mu = mean(totalEarnings), std = sd(totalEarnings))
mu[1: (nValue * 2)] = tempt$mu; std[1: (nValue * 2)]= tempt$std
tempt = summarise(group_by(plotData, condition, gamma), mu = mean(totalEarnings), std = sd(totalEarnings))
mu[(nValue * 2 + 1): (nValue * 4)] = tempt$mu; std[(nValue * 2 + 1): (nValue * 4)]= tempt$std
summaryData$mu = mu
summaryData$std = std
summaryData$ymin = mu - std
summaryData$ymax = mu + std
# plot for HP
for(c in 1:2){
cond = conditionNames[c]
ggplot(summaryData[summaryData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = ymin, ymax = ymax), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = file.path(outFile, sprintf("paraEffect%s.pdf", cond))
ggsave(fileName, width = 16, height = 8)
}
############ look at actionValues group by totalEanrings #########
perc = 0.1
nUse= floor(nComb* perc);
rankings = c('Top', 'Bottom')
for(c in 1 : 2){
cond = conditions[c]
condName = conditionNames[c]
condColor = conditionColors[c]
if(condName == 'HP'){
hdrData = hdrHPData
inputData = colpHPData
}else{
hdrData = hdrLPData
inputData = colpLPData
}
for(r in 1:2){
ranking = rankings[r]
tempt = order(inputData$totalEarnings, decreasing = (ranking == 'Top'))
UseVaWaits = inputData$vaWaits[tempt[1:nUse],]
UseVaQuits= inputData$vaQuits[tempt[1:nUse],]
# plot
vas = cbind(UseVaWaits, UseVaQuits)
meanValues = apply(vas, FUN = function(x) mean(x[!is.na(x)]), MARGIN = 2)
stdValues = apply(vas, FUN = function(x) sd(x[!is.na(x)]), MARGIN = 2)
maxValues = meanValues + stdValues
minValues = meanValues - stdValues
actions = factor(rep(c('wait', 'quit'), each = hdrData$nTimeStep), levels = c('wait', 'quit'))
plotData = data.frame(meanValues, stdValues, maxValues, minValues,
timeSteps = rep(seq(1,hdrData$nTimeStep),2), actions )
graphics.off()
titleText = sprintf("%s, %s%s total earnings",condName, ranking, percent(perc))
ggplot(plotData, aes(timeSteps, meanValues, linetype = actions)) +
geom_ribbon(data = plotData[plotData$actions == 'wait',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_ribbon(data = plotData[plotData$actions == 'quit',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_line(color = conditionColors[c], size = 1) + xlab('Time step') + ylab('Action value') + ggtitle(titleText)+ saveTheme +
scale_linetype_discrete(name = "Action")
#coord_cartesian(ylim=c(-2,5))
fileName = sprintf('%s/actionValue%s%s.pdf', outFile, condName, ranking)
ggsave(file = fileName, width = 10, height = 6)
}
}
######### plot aucCompare and wtwCompare #######
p1 = matrix(c(colpHPData[[1]],colpHPData[[5]], colpHPData[[6]],colpHPData[[7]]),
ncol = 4)
p2 = matrix(c(colpLPData[[1]],colpLPData[[5]], colpLPData[[6]],colpLPData[[7]]),
ncol = 4)
plotData = rbind(p1, p2)
plotData = as.data.frame(plotData)
colnames(plotData) = names(colpHPData)[c(1,5,6,7)]
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare.pdf")
ggsave(fileName, width = 12, height = 8)
plotData2 = plotData[rep(initialSpace[,2] == 24, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP2.pdf")
ggsave(fileName, width = 6, height = 4)
#### wtw
ggplot(plotData, aes(condition, wtw)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "wtwCompare.pdf")
ggsave(fileName, width = 12, height = 8)
plotData2 = plotData[rep(initialSpace[,2] == 24, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP2.pdf")
ggsave(fileName, width = 6, height = 4)
p1 = matrix(c(colpHPData[[1]],colpHPData[[5]], colpHPData[[6]],colpHPData[[7]]),
ncol = 4)
p2 = matrix(c(colpLPData[[1]],colpLPData[[5]], colpLPData[[6]],colpLPData[[7]]),
ncol = 4)
plotData = rbind(p1, p2)
plotData = as.data.frame(plotData)
colnames(plotData) = names(colpHPData)[c(1,5,6,7)]
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
plotData2 = plotData[rep(initialSpace[,2] == 24, 2), ]
ggplot(plotData[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP2.pdf")
ggsave(fileName, width = 6, height = 4)
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP2.pdf")
ggsave(fileName, width = 6, height = 4)
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earnings.pdf")
ggsave(fileName, width = 6, height = 4)
######### plot aucCompare and wtwCompare #######
p1 = matrix(c(colpHPData[[1]],colpHPData[[5]], colpHPData[[6]],colpHPData[[7]]),
ncol = 4)
p2 = matrix(c(colpLPData[[1]],colpLPData[[5]], colpLPData[[6]],colpLPData[[7]]),
ncol = 4)
plotData = rbind(p1, p2)
plotData = as.data.frame(plotData)
colnames(plotData) = names(colpHPData)[c(1,5,6,7)]
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare.pdf")
ggsave(fileName, width = 12, height = 8)
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earnings.pdf")
ggsave(fileName, width = 6, height = 4)
ggplot(plotData, aes(condition, wtw)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "wtwCompare.pdf")
ggsave(fileName, width = 12, height = 8)
