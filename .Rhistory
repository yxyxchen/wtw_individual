quitIdx = (blockData$trialEarnings == 0)
kmscResults = kmscSimple(blockData$waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(drawTimeSample) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot action value
# prepare data
if(plotActionValue){
para = initialSpace[i, ]
vaWaits = inputRaw$vaWaits[i,j, , ]
vaQuits = inputRaw$vaQuits[i,j, , ]
actionValueViewer(vaWaits, vaQuits, blockData, para)
}
if(plotActionValue) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
gamma = para[3];
wIni = para[5];
nTimeStep = nrow(vaQuits);
# fix vaQuits
# data updated on trial t is stored in the colclumn t+1
if(sum(is.na(vaWaits[,1])) > 0){
vaWaits[is.na(vaWaits[,1]),1]  = rep(wIni, sum(is.na(vaWaits[,1])))
}
for(i in 2 : endTick){
if(any(is.na(vaWaits[,i]))){
vaWaits[is.na(vaWaits[,i]),i]  = vaWaits[is.na(vaWaits[,i]),i-1]
}
}
# if quit at the first trial
if(is.na(vaQuits[1,1])) vaQuit[1,1] =  gamma^ 4 * wIni
# refill
for(i in 1 : endTick){
if(sum(is.na(vaQuits[,i])) > 0 & sum(is.na(vaQuits[,i])) < nTimeStep){
vaQuits[is.na(vaQuits[,i]),i] = vaQuits[match(NA, vaQuits[,i]) -1,i]
}else if(sum(is.na(vaQuits[,i])) >= nrow(vaQuits)){
vaQuits[,i] = rep(vaQuits[nTimeStep,i - 1], nTimeStep)
}else{}
}
#
endTick =  length(blockData$trialEarnings)
nTimeStep = dim(vaQuits)[1]
stepDuration = 0.5
for(i in 1: endTick){
cIdx = i
plotData = data.frame(va =c(vaWaits[,cIdx], vaQuits[,cIdx]),
time = rep( 1 : nTimeStep, 2),
action = rep(c('wait', 'quit'),
each = nTimeStep))
trialTitle =  sprintf('Trial %d', i)
preRewardTitle = sprintf(', preR = %d, preT = %.2f',
blockData$trialEarnings[i-1], blockData$waitDuration[i-1])
nowRewardTitle = sprintf(', nowR = %d, nowT =%.2f',
blockData$trialEarnings[i], blockData$waitDuration[i])
label = paste(trialTitle, preRewardTitle, nowRewardTitle, sep = '')
# waitDuration is not the real waiting time, since sometimes schedualedWait is used
endStep = round(blockData$waitDuration[i] / stepDuration)
p = ggplot(plotData, aes(time, va, color = action)) + geom_line() +
geom_vline(xintercept = endStep) + xlim(c(-1, nTimeStep)) +
ggtitle(label) + xlab('time step') + ylab('action value') + displayTheme
print(p)
readline(prompt = paste(i, '(hit ENTER for action valus in the next trial)'))
}
# this script preprocesses the simulation data
# first, it calculates wtw timeseries and AUC for the simulation data
# second, it callopses the simulation data for the later group analysis
############# load data and functions ######
load('outputs/QStarData/rawHPData.RData')
load('outputs/QStarData/rawLPData.RData')
load('outputs/QstarData/hdrData.RData')
library("dplyr")
library("tidyr")
source('subFxs/plotThemes.R')
source('subFxs/wtwSettings.R')
source('subFxs/helperFxs.R')
## outFile
outFile = 'outputs/QStarData'
############ calculate colpData ########
# colpTrialEarnings
colpTrialEarnings = vector(mode = "list", 2)
colpTotalEarnings = vector(mode = "list", 2)
for(c in 1 : 2){
cond = conditions[c];
condName = conditionNames[c];
if(condName == "HP") inputData = rawHPData else inputData = rawLPData
colpTrialEarnings[[condName]] =
apply(inputData$trialEarnings, MARGIN = c(1,3), FUN = mean)
colpTotalEarnings[[condName]] = apply(colpTrialEarnings[[condName]],
MARGIN = 1, FUN = sum)
}
# colpAUC
colpAUC = list()
rawWTW = list()
for(c in 1 : 2){
cond = conditions[c];
condName = conditionNames[c];
# input
if(condName == "HP") inputData = rawHPData else inputData = rawLPData
tMax = tMaxs[c]
trialTick = trialTicks[[condName]]
# dim
nComb = dim(inputData$timeWaited)[1]
nRep = dim(inputData$timeWaited)[2]
# temporary output
output = matrix(NA, nComb, nRep)
wtwResult = array(dim = c(nComb, nRep, length(tGrid)))
for(i in 1 : nComb){
for(j in 1 : nRep){
waitDuration = inputData$timeWaited[i, j, ]
rewardDelay = inputData$rewardDelays[i, j, ]
quitIdx = (inputData$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
output[i, j] = kmscSimple(waitDuration, quitIdx, tMax, trialTick)$auc
wtwResult[i, j, ] = wtwTSSimple(waitDuration, quitIdx, tGrid, tMax)
} # end of comb
}# end of condition
colpAUC[[condName]] = rowSums(output) / ncol(output)
rawWTW[[condName]] = wtwResult
}
########## save data #########
colpHPData = list(totalEarnings = colpTotalEarnings$HP,
trialEarnings = colpTrialEarnings$HP,
AUC = colpAUC$HP,
wtw = apply(rawWTW$HP, MARGIN = 1, mean))
colpLPData = list(totalEarnings = colpTotalEarnings$LP,
trialEarnings = colpTrialEarnings$LP,
AUC = colpAUC$LP,
wtw = apply(rawWTW$LP, MARGIN = 1, mean)
)
fileName = sprintf("%s/colpData.RData", outFile)
save('colpLPData', 'colpHPData', file = fileName )
fileName = sprintf("%s/rawWTW.RData", outFile)
save('rawWTW', file = fileName)
############# load data and functions ######
load('outputs/QStarData/rawHPData.RData')
load('outputs/QStarData/rawLPData.RData')
load('outputs/QstarData/hdrData.RData')
library("dplyr")
library("tidyr")
source('subFxs/plotThemes.R')
source('subFxs/wtwSettings.R')
source('subFxs/helperFxs.R')
## outFile
outFile = 'outputs/QStarData'
# colpTrialEarnings
colpTrialEarnings = vector(mode = "list", 2)
colpTotalEarnings = vector(mode = "list", 2)
for(c in 1 : 2){
cond = conditions[c];
condName = conditionNames[c];
if(condName == "HP") inputData = rawHPData else inputData = rawLPData
colpTrialEarnings[[condName]] =
apply(inputData$trialEarnings, MARGIN = c(1,3), FUN = mean)
colpTotalEarnings[[condName]] = apply(colpTrialEarnings[[condName]],
MARGIN = 1, FUN = sum)
}
colpAUC = list()
rawWTW = list()
for(c in 1 : 2){
cond = conditions[c];
condName = conditionNames[c];
# input
if(condName == "HP") inputData = rawHPData else inputData = rawLPData
tMax = tMaxs[c]
trialTick = trialTicks[[condName]]
# dim
nComb = dim(inputData$timeWaited)[1]
nRep = dim(inputData$timeWaited)[2]
# temporary output
output = matrix(NA, nComb, nRep)
wtwResult = array(dim = c(nComb, nRep, length(tGrid)))
for(i in 1 : nComb){
for(j in 1 : nRep){
waitDuration = inputData$timeWaited[i, j, ]
rewardDelay = inputData$rewardDelays[i, j, ]
quitIdx = (inputData$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
output[i, j] = kmscSimple(waitDuration, quitIdx, tMax, trialTick)$auc
wtwResult[i, j, ] = wtwTSSimple(waitDuration, quitIdx, tGrid, tMax)
} # end of comb
}# end of condition
colpAUC[[condName]] = rowSums(output) / ncol(output)
rawWTW[[condName]] = wtwResult
}
endTick = match(0,rewardDelay)
endTick
rewardDelay
rewardDelay = inputData$rewardDelays[i, j, ]
rewardDelay
if(condName == "HP") inputData = rawHPData else inputData = rawLPData
inputData$rewardDelays[i, j,]
View(rawHPData)
View(rawLPData)
View(rawLPData)
rm(list = ls())
outFile = 'outputs/QStarData'
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
condIdx = 1
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
nMS = 10
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
MSPara = getMSPara(cond, stepDuration, nMS, traceDecay, sigma)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
outFile = 'QStarData'
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = sprintf('%s/initialSpace.RData', outFile))
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : 1:nrow(initialSpace)){
para = initialSpace[i,]
for(j in 1 : nRep ){
tempt=  QStarModel(para,MSPara, otherPara, cond)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Ws[i, j,] = tempt[['ws']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("ws" = Ws, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "unif16") rawHPData = outputData else rawLPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
fileName = sprintf('outputs/%s/rawLPData.RData', outFile)
save(rawLPData,file = fileName)
rm(list = ls())
source('~/Documents/first_kick/wtw_individual/simPreprocess.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual/simGroupAnalysis.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual/simGroupAnalysis.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual/expAnalysis.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual/expAnalysis.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual/expAnalysis.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual/expAnalysis.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual/expAnalysis.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual/expAnalysis.R', echo=TRUE)
source('~/Documents/first_kick/wtw_individual/expAnalysis.R', echo=TRUE)
rm(list = ls())
# this simulation using average payoff
### output file ####
outFile = 'outputs/QStarData'
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
nMS = 10
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
outFile = 'QStarData'
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = sprintf('%s/initialSpace.RData', outFile))
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : 1:nrow(initialSpace)){
para = initialSpace[i,]
for(j in 1 : nRep ){
tempt=  QStarModel(para,otherPara, cond)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Ws[i, j,] = tempt[['ws']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("ws" = Ws, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "unif16"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawLPData.RData', outFile)
save(rawLPData,file = fileName)
}
}
######## generate hdrData ######
# hdrData include otherPara, MSPara
# also nTimeStep and TraceValue
# therefore, no need to call getPara in later analysis anymore
stepDuration = 0.5
for(c in 1: 2){
cond = conditions[c]
otherPara = getOtherPara(cond, stepDuration)
hdrData = c(otherPara, MSPara)
hdrData$nTimeStep = hdrData$tMax / hdrData$stepDuration
hdrData$traceValues = hdrData$traceDecay ^ ( 1 :   hdrData$nTimeStep - 1)
if(cond == 'unif16') hdrHPData= hdrData else  hdrLPData= hdrData
}
fileName = 'outputs/QStarData/hdrData.RData'
save(hdrHPData, hdrLPData, file = fileName)
# this simulation using average payoff
### output file ####
outFile = 'outputs/QStarData'
################## read data #################
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('model.R') # QStar model
source('subFxs/wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('subFxs/paraFxs.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
################ input ################
# cond input
for(condIdx in 1 : 2){
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
# other input
stepDuration = 0.5
nMS = 10
traceDecay = 0.985
sigma = 0.2
# genrate
otherPara = getOtherPara(cond, stepDuration)
############# simulate for the distribution of toalEarnings ##########
nPara = 5
paraNames = c('phi', 'tau', 'gamma', 'lambda', 'wIni')
nValue = 3
nComb = nValue ^ nPara
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(c(0.01, 0.05, 0.2), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8, 24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
outFile = 'QStarData'
save('initialSpace', 'nValue', 'nPara', 'paraNames', 'nComb',
file = sprintf('%s/initialSpace.RData', outFile))
# set seed
set.seed(123)
# simualte
nRep = 5
tMax = otherPara[['tMax']]
TrialEarnings = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
RewardDelays = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
Ws = array(dim = c(nValue^nPara, nRep, tMax / stepDuration)) # diifferent from master
TimeWaited = array(dim = c(nValue^nPara, nRep, blockSecs / iti + 1))
vaQuits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
vaWaits = array(dim = c(nValue^nPara, nRep, tMax / stepDuration, blockSecs / iti + 1))
for(i in 1 : 1:nrow(initialSpace)){
para = initialSpace[i,]
for(j in 1 : nRep ){
tempt=  QStarModel(para,otherPara, cond)
TrialEarnings[i, j,] = tempt[['trialEarnings']]
Ws[i, j,] = tempt[['ws']]
RewardDelays[i, j,] = tempt[['rewardDelays']]
TimeWaited[i, j, ] = tempt[['timeWaited']]
vaQuits[i, j,  , ] = tempt[['vaQuits']]
vaWaits[i, j, ,  ] = tempt[['vaWaits']]
}
}
# organize and save outputs
outputData = list("ws" = Ws, "timeWaited" = TimeWaited,
"rewardDelays" = RewardDelays, "trialEarnings" = TrialEarnings,
"vaWaits" = vaWaits, "vaQuits" = vaQuits
)
outFile = 'QStarData'
if(cond == "unif16"){
rawHPData = outputData
fileName = sprintf('outputs/%s/rawHPData.RData', outFile)
save(rawHPData,file = fileName)
}else{
rawLPData = outputData
fileName = sprintf('outputs/%s/rawLPData.RData', outFile)
save(rawLPData,file = fileName)
}
}
######## generate hdrData ######
# hdrData include otherPara, MSPara
# also nTimeStep and TraceValue
# therefore, no need to call getPara in later analysis anymore
stepDuration = 0.5
for(c in 1: 2){
cond = conditions[c]
otherPara = getOtherPara(cond, stepDuration)
hdrData = list(otherPara)
hdrData$nTimeStep = hdrData$tMax / hdrData$stepDuration
hdrData$traceValues = hdrData$traceDecay ^ ( 1 :   hdrData$nTimeStep - 1)
if(cond == 'unif16') hdrHPData= hdrData else  hdrLPData= hdrData
}
fileName = 'outputs/QStarData/hdrData.RData'
save(hdrHPData, hdrLPData, file = fileName)
# hdrData include otherPara, MSPara
# also nTimeStep and TraceValue
# therefore, no need to call getPara in later analysis anymore
stepDuration = 0.5
for(c in 1: 2){
cond = conditions[c]
otherPara = getOtherPara(cond, stepDuration)
hdrData = list()
hdrData[['otherPara']] = otherPara
hdrData$nTimeStep = hdrData$tMax / hdrData$stepDuration
hdrData$traceValues = hdrData$traceDecay ^ ( 1 :   hdrData$nTimeStep - 1)
if(cond == 'unif16') hdrHPData= hdrData else  hdrLPData= hdrData
}
fileName = 'outputs/QStarData/hdrData.RData'
save(hdrHPData, hdrLPData, file = fileName)
