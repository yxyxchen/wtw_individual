quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2) # combs supposed to earn most
nCombList = which(inputColp$totalEarnings  < 350 & inputColp$totalEarnings  > 300 )
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2) # combs supposed to earn most
nCombList = which(inputColp$totalEarnings  < 380 & inputColp$totalEarnings  > 300 )
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2) # combs supposed to earn most
nCombList = which(inputColp$totalEarnings  >450 )
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2) # combs supposed to earn most
nCombList = which(inputColp$AUC > 15 )
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2) # combs supposed to earn most
nCombList = which(inputColp$AUC > 10 )
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
nCombList = which(groupData$totalEarnings > 420 & groupData$condition == 'LP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[idx],
groupData$AUC[idx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[thisCond]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
rm(list = ls())
getEV = function(gamma, cIdx){
source('wtwSettings.R')
# get timing input
stepDuration = 0.5
condName = conditionNames[cIdx];
timing = timings[[condName]]
tMax = tMaxs[cIdx]
trialTick = seq(0, tMax, by = stepDuration)
nTimeStep = length( trialTick )
outputs = vector(length = nTimeStep)
for(i in 1 : nTimeStep){
timePoint = trialTick[i]
gammaExp =  (timing - timePoint) / 4
outputs[i] = sum(tokenValue * gamma ^ (gammaExp[gammaExp >= 0])) / sum(timing > timePoint )
}
return(outputs)
}
HP = getEV(0.9, 1)
LP = getEV(0.9, 2)
plot(HP)
plot(LP)
HP = getEV(0.9, 1)
LP = getEV(0.9, 2)
plotData(HP, time = 1 : length(HP))
plotData = data.frame(HP, time = 1 : length(HP))
plotData = data.frame(HP, time = 1 : length(HP))
ggplot(plotData, aes(HP, time)) + geom_point() + xlab('Time step') + ylab("vaWait")
library('ggplot2')
plotData = data.frame(HP, time = 1 : length(HP))
ggplot(plotData, aes(HP, time)) + geom_point() + xlab('Time step') + ylab("vaWait")
p1 = data.frame(HP, time = 1 : length(HP))
p2 = data.frame(LP, time = 1 : length(LP))
plotData = rbind(p1, p2)
p1 = data.frame(va = HP, time = 1 : length(HP))
p2 = data.frame(va = LP, time = 1 : length(LP))
plotData = rbind(p1, p2)
p1 = data.frame(va = HP, time = 1 : length(HP))
p2 = data.frame(va = LP, time = 1 : length(LP))
plotData = rbind(p1, p2)
plotData$condition = c(rep("HP", length(HP)), rep("LP", length(LP)))
p1 = data.frame(va = HP, time = 1 : length(HP))
p2 = data.frame(va = LP, time = 1 : length(LP))
plotData = rbind(p1, p2)
plotData$condition = c(rep("HP", length(HP)), rep("LP", length(LP)))
ggplot(plotData, aes(va, time)) + geom_point() + xlab('Time step') + ylab("vaWait")
+ facet_wrap(~condition)
p1 = data.frame(va = HP, time = 1 : length(HP))
p2 = data.frame(va = LP, time = 1 : length(LP))
plotData = rbind(p1, p2)
plotData$condition = c(rep("HP", length(HP)), rep("LP", length(LP)))
ggplot(plotData, aes(va, time)) + geom_point() + xlab('Time step') + ylab("vaWait")
+ facet_wrap(~condition)
ggplot(plotData, aes(va, time)) + geom_point() + xlab('Time step') + ylab("vaWait") + facet_wrap(.~condition)
View(plotData)
source("plotTheme.R")
plotData = data.frame(va = HP, time = 1 : length(HP))
plotData$condition = c(rep("HP", length(HP)), rep("LP", length(LP)))
ggplot(plotData, aes(va, time)) + geom_point() + xlab('Time step') + ylab("vaWait") + saveTheme
plotData = data.frame(va = HP, time = 1 : length(HP))
ggplot(plotData, aes(va, time)) + geom_point() + xlab('Time step') + ylab("vaWait") + saveTheme
length(HP)
HP
plotData = data.frame(va = HP, time = 1 : 161)
ggplot(plotData, aes(va, time)) + geom_point() + xlab('Time step') + ylab("vaWait") + saveTheme +
ggtitle('HP')
View(plotData)
graphics.off()
plotData = data.frame(va = HP, time = 1 : 161)
ggplot(plotData, aes(va, time)) + geom_point()
p1 = data.frame(va = HP, time = 1 : length(HP))
p2 = data.frame(va = LP, time = 1 : length(LP))
plotData = rbind(p1, p2)
plotData$condition = c(rep("HP", length(HP)), rep("LP", length(LP)))
ggplot(plotData, aes(time, va)) + geom_point() + xlab('Time step') + ylab("vaWait") + facet_wrap(.~condition)
HP = getEV(0.9, 1)
LP = getEV(0.9, 2)
p1 = data.frame(va = HP, time = 1 : length(HP))
ggplot(plotData, aes(time, va)) + geom_point() + xlab('Time step') + ylab("vaWait") + ggtitle('HP')
LP = getEV(0.9, 2)
plotData = data.frame(va = HP, time = 1 : length(HP))
ggplot(plotData, aes(time, va)) + geom_point() + xlab('Time step') + ylab("vaWait") + ggtitle('HP')
plotData = data.frame(va = HP, time = 1 : length(HP))
ggplot(plotData, aes(time, va)) + geom_point() + xlab('Time step') + ylab("vaWait") + ggtitle('HP') + saveTheme
plotData = data.frame(va = LP, time = 1 : length(LP))
ggplot(plotData, aes(time, va)) + geom_point() + xlab('Time step') + ylab("vaWait") + ggtitle('LP') + saveTheme
