plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
plotData = plotData[rep(initialSpace[,3] == 0.94, 2), ]
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare0.94.pdf")
ggsave(fileName, width = 12, height = 8)
plotData = plotData[rep(initialSpace[,3] == 0.94, 2), ]
initialSpace[,3]
initialSpace[10,3]
initialSpace[10,3] == 0.94
######### plot aucCompare and wtwCompare #######
plotData = rbind(as.data.frame(colpHPData[c(1,5,6,7)]),
as.data.frame(colpLPData[c(1,5,6,7)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
plotData = plotData[rep(initialSpace[,3] == initialSpace[10,3], 2), ]
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare0.94.pdf")
ggsave(fileName, width = 12, height = 8)
plotData = rbind(as.data.frame(colpHPData[c(1,5,6,7)]),
as.data.frame(colpLPData[c(1,5,6,7)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare.pdf")
ggsave(fileName, width = 12, height = 8)
######### plot aucCompare and wtwCompare #######
plotData = rbind(as.data.frame(colpHPData[c(1,5,6,7)]),
as.data.frame(colpLPData[c(1,5,6,7)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare.pdf")
ggsave(fileName, width = 12, height = 8)
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
ggsave(fileName, width = 6, height = 4)
#### wtw
ggplot(plotData, aes(condition, wtw)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "wtwCompare.pdf")
ggsave(fileName, width = 12, height = 8)
plotData = plotData[rep(initialSpace[,3] == 0.98, 2)]
ggplot(plotData, aes(condition, wtw)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "wtwCompare.pdf")
ggsave(fileName, width = 12, height = 8)
plotData = rbind(as.data.frame(colpHPData[c(1,5,6,7)]),
as.data.frame(colpLPData[c(1,5,6,7)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
plotData2 = plotData[rep(initialSpace[,3] == 0.98, 2)]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
ggsave(fileName, width = 6, height = 4)
plotData = rbind(as.data.frame(colpHPData[c(1,5,6,7)]),
as.data.frame(colpLPData[c(1,5,6,7)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
plotData2 = plotData[rep(initialSpace[,3] == 0.98, 2)]
ggsave(fileName, width = 12, height = 8)
plotData2 = plotData[rep(initialSpace[,3] == 0.98, 2), ]
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare.pdf")
ggsave(fileName, width = 12, height = 8)
plotData2 = plotData[rep(initialSpace[,3] == 0.98, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
ggsave(fileName, width = 6, height = 4)
plotData2 = plotData[rep(initialSpace[,5] == 2, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
plotData2 = plotData[rep(initialSpace[,5] == 5, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
plotData2 = plotData[rep(initialSpace[,5] == 8, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
ggsave(fileName, width = 6, height = 4)
plotData2 = plotData[rep(initialSpace[,5] == 8, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP8.pdf")
ggsave(fileName, width = 6, height = 4)
plotData2 = plotData[rep(initialSpace[,5] == 5, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP5.pdf")
ggsave(fileName, width = 6, height = 4)
plotData2 = plotData[rep(initialSpace[,5] == 2, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP2.pdf")
ggsave(fileName, width = 6, height = 4)
plotData2 = plotData[rep(initialSpace[,2] == 8, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP2.pdf")
plotData2 = plotData[rep(initialSpace[,2] == 16, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP2.pdf")
plotData2 = plotData[rep(initialSpace[,2] == 24, 2), ]
ggplot(plotData2[plotData2$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP2.pdf")
#### wtw
ggplot(plotData, aes(condition, wtw)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "wtwCompare.pdf")
ggsave(fileName, width = 12, height = 8)
ggplot(plotData, aes(condition, timeWaited)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + displayTheme
fileName = file.path(outFile, "timeWaited.pdf")
ggsave(fileName, width = 12, height = 8)
#### check immediete quit
# HP
a = (rawHPData$timeWaited == 0) & (rawHPData$rewardDelays != 0)
endTicks = apply(rawHPData$rewardDelays, MARGIN = c(1,2),
FUN = function(x) match(0, x) - 1)
sum(a[!is.na(a)]) / (5 * 243 * mean(endTicks))
a = (rawHPData$timeWaited == 0) & (rawHPData$rewardDelays != 0)
endTicks = apply(rawHPData$rewardDelays, MARGIN = c(1,2),
FUN = function(x) match(0, x) - 1)
sum(a[!is.na(a)]) / (5 * 243 * mean(endTicks))
a = (rawHPData$timeWaited == 0) & (rawHPData$rewardDelays != 0)
# we should upload it
source('helperFxs.R')
library('ggplot2')
source('plotTheme.R')
source('wtwSettings.R')
####
load('QStarData/rawdata.RData')
load('QStarData/colpData.RData')
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(inputColp$totalEarnings <200)
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(any(plotTrialData)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks$LP)
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(any(plotKMSC)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks$LP, size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2) # combs supposed to earn most
nCombList = which(inputColp$totalEarnings <200)
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
print(initialSpace[i,])
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(any(plotTrialData)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks$LP)
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(any(plotKMSC)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks$LP, size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
which(inputColp$totalEarnings <200)
library('ggplot2')
library('dplyr')
library('tidyr')
source('simulate.R') # QStar model
source('wtwSettings.R') # wtw settings for both HP and LP
source('getPara.R') # functions to get MSPara and otherPara from inputs and wtwSettings
source('helperFxs.R')
# cond input
condIdx = 2
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
stepDuration = 0.5
otherPara = getOtherPara(cond, stepDuration)
tMax = otherPara[['tMax']]
trialTick = trialTicks[[condName]]
# initial space
nPara = 5
nValue = 3
tMax = otherPara[['tMax']]
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(seq(0.2, 0.8, 0.3), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8,24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
combIdx = 160
rIdx = 2
stepDuration = 0.5;
#  [1] 160 192 195 196 197 198 213 215 217 218 219 220 221 222 223 224 225 226 227
# 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243
para = initialSpace[combIdx,]
tempt = QStarModel(para, MSPara, otherPara, cond)
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings,AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
combIdx = 160
rIdx = 2
stepDuration = 0.5;
para = initialSpace[combIdx,]
colpLPData$totalEarnings[160]
combIdx = 160
rIdx = 2
stepDuration = 0.5;
#  [1] 160 192 195 196 197 198 213 215 217 218 219 220 221 222 223 224 225 226 227
# 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243
para = initialSpace[combIdx,]
tempt = QStarModel(para, MSPara, otherPara, cond)
# summarise earnings, AUC, wtw
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings,AUC)
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
combIdx = 192
rIdx = 2
stepDuration = 0.5;
#  [1] 160 192 195 196 197 198 213 215 217 218 219 220 221 222 223 224 225 226 227
# 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243
para = initialSpace[combIdx,]
tempt = QStarModel(para, MSPara, otherPara, cond)
# summarise earnings, AUC, wtw
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings,AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
library('ggplot2')
library('dplyr')
library('tidyr')
source('simulate.R') # QStar model
source('wtwSettings.R') # wtw settings for both HP and LP
source('getPara.R') # functions to get MSPara and otherPara from inputs and wtwSettings
source('helperFxs.R')
################ selec condition ################
# cond input
condIdx = 2
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
stepDuration = 0.5
otherPara = getOtherPara(cond, stepDuration)
tMax = otherPara[['tMax']]
trialTick = trialTicks[[condName]]
# initial space
nPara = 5
nValue = 3
tMax = otherPara[['tMax']]
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(seq(0.2, 0.8, 0.3), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8,24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
########### simulate #############
combIdx = 192
rIdx = 2
stepDuration = 0.5;
para = initialSpace[combIdx,]
tempt = QStarModel(para, MSPara, otherPara, cond)
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings,AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
combIdx = 192
rIdx = 2
stepDuration = 0.5;
#  [1] 160 192 195 196 197 198 213 215 217 218 219 220 221 222 223 224 225 226 227
# 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243
para = initialSpace[combIdx,]
tempt = QStarModel(para, MSPara, otherPara, cond)
# summarise earnings, AUC, wtw
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings,AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
