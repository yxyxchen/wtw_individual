waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings, AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
library('ggplot2')
library('dplyr')
library('tidyr')
source('helperFxs.R')
source('simulate.R') # QStar model
source('wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('getPara.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
#### load
load('QStarData/colpData.RData')
################ selec condition ################
# cond input
condIdx = 100
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
trialTick = trialTicks[[condName]]
library('ggplot2')
library('dplyr')
library('tidyr')
source('helperFxs.R')
source('simulate.R') # QStar model
source('wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('getPara.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
#### load
load('QStarData/colpData.RData')
################ selec condition ################
# cond input
condIdx = 1
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
trialTick = trialTicks[[condName]]
########### extract raw data #############
combIdx = 100
para = initialSpace[combIdx,]
MSPara = getMSPara(cond, stepDuration, nMS, traceValues, sigma)
otherPara = getOtherPara(cond, stepDuration)
tempt = QStarModel(para, MSPara, otherPara, cond)
# summarise earnings, AUC, wtw
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings, AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
library('ggplot2')
library('dplyr')
library('tidyr')
source('helperFxs.R')
source('simulate.R') # QStar model
source('wtwSettings.R') # wtw settings for both HP and LP
# can't change
source('getPara.R') # functions to get MSPara and otherPara from inputs and wtwSettings
# can change for different MS model, and
#### load
load('QStarData/colpData.RData')
################ selec condition ################
# cond input
condIdx = 2
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
trialTick = trialTicks[[condName]]
########### extract raw data #############
combIdx = 100
para = initialSpace[combIdx,]
MSPara = getMSPara(cond, stepDuration, nMS, traceValues, sigma)
otherPara = getOtherPara(cond, stepDuration)
tempt = QStarModel(para, MSPara, otherPara, cond)
# summarise earnings, AUC, wtw
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings, AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
rm(list = ls())
rm(list = ls())
# outFile
outFile = 'QStar_figures'
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source('plotTheme.R')
source('wtwSettings.R')
# initialSpace
load('QStarData/initialSpace.RData')
####
load('QStarData/colpData.RData')
load('QStarData/rawWTW.RData')
load('QStarData/hdrData.RData')
####
####### plot distribution of totalEarnings
plotData = data.frame(totalEarnings = c(colpHPData$totalEarnings, colpLPData$totalEarnings),
condition = rep(c("HP", "LP"), each = nComb), phi = initialSpace[,1],
tau = initialSpace[,2], gamma = initialSpace[,3],
lambda = initialSpace[,4], wIni = initialSpace[,5]
)
ggplot(plotData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = file.path(outFile, 'earningSml.pdf')
ggsave(fileName, width = 16, height = 8)
# calculate range
summarise(group_by(plotData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
# outFile
outFile = 'QStar_figures'
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source('plotTheme.R')
source('wtwSettings.R')
# initialSpace
load('QStarData/initialSpace.RData')
####
load('QStarData/colpData.RData')
load('QStarData/rawWTW.RData')
load('QStarData/hdrData.RData')
####
####### plot distribution of totalEarnings
plotData = data.frame(totalEarnings = c(colpHPData$totalEarnings, colpLPData$totalEarnings),
condition = rep(c("HP", "LP"), each = nComb), phi = initialSpace[,1],
tau = initialSpace[,2], gamma = initialSpace[,3],
lambda = initialSpace[,4], wIni = initialSpace[,5]
)
summarise(group_by(plotData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
source('helperFxs.R')
library('ggplot2')
source('plotTheme.R')
source('wtwSettings.R')
# load data
####
load('QStarData/rawdata.RData')
load('QStarData/colpData.RData')
load('QStarData/initialSpace.RData')
# prepare
####
condIdx = 1
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2) # combs supposed to earn most
nCombList = which(inputColp$totalEarnings < 350)
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
source('helperFxs.R')
library('ggplot2')
source('plotTheme.R')
source('wtwSettings.R')
# load data
####
load('QStarData/rawdata.RData')
load('QStarData/colpData.RData')
load('QStarData/initialSpace.RData')
# prepare
####
condIdx = 1
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(inputColp$AUC <= 6 & inputColp$AUC >= 2) # combs supposed to earn most
nCombList = which(inputColp$totalEarnings < 350)
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
nCombList = which(groupData$totalEarnings < 200 & groupData$condition == 'HP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[thisCond]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
source('~/Documents/first_kick/wtw_individual/trialViewer.R', echo=TRUE)
graphics.off()
nCombList = which(groupData$AUC <= 6 & groupData$AUC >= 2 & groupData$condition == 'LP')
nCombList = which(groupData$totalEarnings < 200 & groupData$condition == 'HP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[thisCond]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
# individual difference analysis
# Cyx
# outFile
outFile = 'exp_figures'
# analysis sub-functions
source('load.R')
source('helperFxs.R')
library("ggplot2")
library('dplyr')
source("plotTheme.R")
source("wtwSettings.R")
# load all data
allData = load()
hdrData = allData$hdrData             # unpack header data
# data frame with variables "ID", "Cbal", "Condition1", "Condition2"
trialData = allData$trialData         # unpack trial data
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
cat('Analyzing data for n','=',n,'subjects.\n')
nCombList = which(groupData$AUC <= 6 & groupData$AUC >= 2 & groupData$condition == 'LP')
nCombList = which(groupData$totalEarnings < 200 & groupData$condition == 'HP')
# nCombList = 160
for(nCb in 1 : length(nCombList)){
idx = nCombList[nCb]
sIdx = ceiling(idx / 2)
bkIdx = idx - (sIdx - 1) * 2
# get data
thisID = allIDs[sIdx]
thisTrialData = trialData[[thisID]]
thisCond = unique(thisTrialData$condition)
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
thisFunction = unique(thisTrialData$trial_function)
label = sprintf('Subject %s, earn %d, AUC %.2f)',thisID,
groupData$totalEarnings[sIdx * (2 -1) + bkIdx],
groupData$AUC[sIdx * (2 -1) + bkIdx])
tMax = ifelse(thisCond == conditionNames[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# plot trialData
if (plotTrialData) {
trialPlots(thisTrialData,label)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# survival analysis
if(plotKMSC){
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
# plot wait time distribution based on survival analysis
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[thisCond]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram() + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)  + xlab('Wait duration / s')
print(p)
}
# # wait for input before continuing, if individual plots were requested
if(any(plotKMSC, plotTrialData, drawTimeSample)){
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
############ compare to exp data #######
load('expData/groupData.RData')
load('expData/groupData.RData')
load('expData/groupData.RData')
