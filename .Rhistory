label = sprintf('earn: %d, AUC: %.2f',
totalEarnings,AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
para
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
vaWaits = tempt$vaWaits
vaQuits = tempt$vaQuits
wIni = para[5]
gamma = para[3]
nTimeStep = otherPara$tMax / otherPara$stepDuration
vaWaits[is.na(vaWaits[,1]),1] = rep(wIni, sum(is.na(vaWaits[,1])))
vaQuits[is.na(vaQuits[,1]),1] = rep(wIni * gamma ^ (iti / stepDuration),
sum(is.na(vaQuits[,1])))
for(i in 2 : endTick){
vaWaits[is.na(vaWaits[,i]),i] = vaWaits[is.na(vaWaits[,i]),i-1]
vaQuits[is.na(vaQuits[,i]),i] = vaQuits[is.na(vaQuits[,i]),i-1]
}
cIdx = endTick
plotData = data.frame(va =c(vaWaits[,cIdx], vaQuits[,cIdx]),
time = rep( 1 : (otherPara$tMax / otherPara$stepDuration), 2),
action = rep(c('wait', 'quit'),
each = otherPara$tMax / otherPara$stepDuration))
label = sprintf('last, rwd = %d, tw = %.2f; rwd = %d, tw =%.2f',
tempt$trialEarnings[i-1], waitDuration[i-1],
tempt$trialEarnings[i], waitDuration[i])
p = ggplot(plotData, aes(time, va, color = action)) + geom_line() + ggtitle(label) + xlab('step')
# plotData$waitProb = waitProb[,i]
# p = ggplot(plotData[plotData$action == 'wait',], aes(time, waitProb)) + geom_line()+
#   ggtitle(label) + xlim(c(1,3)) + xlab('step')
print(p)
HP = vector(length(timings$HP))
length(timings$HP)
HP = vector(length(timings$HP))
HP = vector(NA, length(timings$HP))
HP = numeric(NA, length(timings$HP))
HP = numeric(NA, length = length(timings$HP))
HP = vector(NA, length = length(timings$HP))
HP = vector(length = length(timings$HP))
######## condition varibles #########
conditions = c("unif16", "log_1.75_32")
conditionNames = c("HP", "LP")
conditionColors = c("#7b3294", "#008837")
######## timing variables ########
tMaxs = c(16, 32) # trial durations
blockMins = 15 # block duration in mins
blockSecs = blockMins * 60 # block duration in secs
iti = 2 # iti duration in secs
tGrid = seq(0, blockSecs, 0.1)
######### reward variable ########
tokenValue = 5 #value of the token
## reward timings in HP
HPTimings = seq(2, 16, by = 2)
## reward timings in LP
n = 8
m = 32
fac = 1.75
d1 = log(m/(fac^n - 1))
d2 = log(m + m/(fac^n - 1))
tempt = exp(seq(d1,d2,length.out = n+1))
LPTimings = tempt[2:length(tempt)] - tempt[1]
timings = list(
HP = HPTimings,
LP = LPTimings
)
rm(m, fac, d1, d2, tempt, HPTimings, LPTimings)
########## supporting vairbales ########
# time ticks within a trial for timeEarnings or wtw analysis
trialTicks = list(
'HP' = round(seq(0, tMaxs[1], by = 0.1), 1),
'LP' = round(seq(0, tMaxs[2], by = 0.1), 1)
)
########## additional  variables for optimal analysis ########
# CDF of reward delays: p(t_reward <= T)
rewardDelayCDF = list(
HP = approx(c(0, timings$HP), seq(0, 1, 1/n), xout = trialTicks$HP, method = "constant")$y,
LP = approx(c(0, round(timings$LP,1)), seq(0, 1, 1/n), xout = trialTicks$LP, method = "constant")$y
)
#  PDF of reward delays: p(t_reward = T)
HP = rep(0, length(trialTicks$HP))
HP[trialTicks$HP %in% timings$HP] = 1 / n
LP = rep(0, length(trialTicks$LP))
# can't find ticks exactly equal to the timings
# find cloest one
LP[trialTicks$LP %in% round(timings$LP, 1)] = 1 / n
rewardDelayPDF = list(
"HP" = HP,
"LP" = LP
)
# E(t_reward | t_reward <= T)
HP = cumsum(trialTicks$HP * rewardDelayPDF$HP) / cumsum(rewardDelayPDF$HP)
LP = cumsum(trialTicks$LP * rewardDelayPDF$LP) / cumsum(rewardDelayPDF$LP)
# no reward arrives before the first reward timing, so points before that turn to NAN
meanRewardDelay = list('HP' = HP, 'LP' = LP)
# rewardRate
HP = tokenValue * rewardDelayCDF$HP /
(meanRewardDelay$HP * rewardDelayCDF$HP + trialTicks$HP * (1 - rewardDelayCDF$HP) + iti)
LP = tokenValue * rewardDelayCDF$LP /
(meanRewardDelay$LP * rewardDelayCDF$LP + trialTicks$LP * (1 - rewardDelayCDF$LP) + iti)
# quitting before the first reward timing get 0 reward
HP[which(is.nan(HP))] = 0
LP[which(is.nan(LP))] = 0
rewardRate = list('HP' = HP, 'LP' = LP)
optimWaitTimes = list()
optimWaitTimes$HP = trialTicks$HP[which.max(HP)]
optimWaitTimes$LP = trialTicks$LP[which.max(LP)]
optimRewardRates = list()
optimRewardRates$HP = max(HP)
optimRewardRates$LP = max(LP)
# calculate the expected reward of it
n = length(timings$HP)
HP = vector(length = n)
for(i in 1 : n){
HP[i] = tokenValue * sum(gamma ^  (4 * (0 : (8 - i)))) / (n+1 - i)
}
HP
diff(timings$HP)
cumsum(c(0, diff(timings$HP)))
n = length(timings$HP)
# hp
HP = vector(length = n)
gaps = cumsum(c(0, diff(timings$HP)))
for(i in 1 : n){
HP[i] = tokenValue * sum(gamma ^  gaps[1 : (n+1 - i)]) / (n+1 - i)
}
HP
i = 1
tokenValue
sum(gamma ^  gaps[1 : (n+1 - i)])
gaps[1 : (n+1 - i)]
HP = vector(length = n)
gaps = cumsum(c(0, diff(timings$HP)))
for(i in 1 : n){
HP[i] = sum(tokenValue * gamma ^  gaps[1 : (n+1 - i)]) / (n+1 - i)
}
HP
i = 1
tokenValue * gamma ^  gaps[1 : (n+1 - i)]
gamma
HP = vector(length = n)
gaps = cumsum(c(0, diff(timings$HP)))
gamma = 0.94
for(i in 1 : n){
HP[i] = sum(tokenValue * gamma ^  gaps[1 : (n+1 - i)]) / (n+1 - i)
}
HP[i]
function(gamma, condName){
source(wtwSettings.R)
# get timing input
timing = timings[[condName]]
n = length(timing)
outputs = vector(length = n)
gaps = cumsum(c(0, diff(timing)))
for(i in 1 : n){
outputs[i] = sum(tokenValue * gamma ^  gaps[1 : (n+1 - i)]) / (n+1 - i)
}
}
getEV = function(gamma, condName){
source(wtwSettings.R)
# get timing input
timing = timings[[condName]]
n = length(timing)
outputs = vector(length = n)
gaps = cumsum(c(0, diff(timing)))
for(i in 1 : n){
outputs[i] = sum(tokenValue * gamma ^  gaps[1 : (n+1 - i)]) / (n+1 - i)
}
}
getEV(0.9, 'HP')
getEV = function(gamma, condName){
source('wtwSettings.R')
# get timing input
timing = timings[[condName]]
n = length(timing)
outputs = vector(length = n)
gaps = cumsum(c(0, diff(timing)))
for(i in 1 : n){
outputs[i] = sum(tokenValue * gamma ^  gaps[1 : (n+1 - i)]) / (n+1 - i)
}
}
getEV(0.9, 'HP')
getEV = function(gamma, condName){
source('wtwSettings.R')
# get timing input
timing = timings[[condName]]
n = length(timing)
outputs = vector(length = n)
gaps = cumsum(c(0, diff(timing)))
for(i in 1 : n){
outputs[i] = sum(tokenValue * gamma ^  gaps[1 : (n+1 - i)]) / (n+1 - i)
}
return(outputs)
}
getEV(0.9, 'HP')
getEV(0.9, 'LP')
timing
timing = timings[[condName]]
timing
rm(list = ls())
condName = condNames[cIdx];
nTimeStep = tMaxs[cIdx] / stepDuration
timing = timings[[condName]]
source('wtwSettings.R')
# get timing input
condName = condNames[cIdx];
nTimeStep = tMaxs[cIdx] / stepDuration
timing = timings[[condName]]
source('wtwSettings.R')
cIdx = 2
# get timing input
condName = condNames[cIdx];
nTimeStep = tMaxs[cIdx] / stepDuration
timing = timings[[condName]]
outputs = vector(length = n)
condName = condNames[cIdx];
# get timing input
condName = conditionNames[cIdx];
nTimeStep = tMaxs[cIdx] / stepDuration
timing = timings[[condName]]
stepDuration = 0.5
condName = conditionNames[cIdx];
nTimeStep = tMaxs[cIdx] / stepDuration
timing = timings[[condName]]
outputs = vector(length = n)
stepDuration = 0.5
condName = conditionNames[cIdx];
nTimeStep = tMaxs[cIdx] / stepDuration
timing = timings[[condName]]
trialTick = trialTicks[[condName]]
outputs = vector(length = nTimeStep)
timePoint = trialTicks
timePoint = trialTick[i]
i = 1
timePoint = trialTick[i]
timePoint
timePoint
nTimeStep
trialTick
tMax = tMaxs[cIdx]
trialTick = seq(0, tMax)
trialTick = seq(0, tMax, by = stepDuration)
stepDuration = 0.5
condName = conditionNames[cIdx];
timing = timings[[condName]]
tMax = tMaxs[cIdx]
trialTick = seq(0, tMax, by = stepDuration)
nTimeStep = length( trialTick )
trialTick
trialTick[i]
sum(timing > timePoint )
(timing - timePoint)
(timing - timePoint) / 4
# get timing input
stepDuration = 0.5
condName = conditionNames[cIdx];
timing = timings[[condName]]
tMax = tMaxs[cIdx]
trialTick = seq(0, tMax, by = stepDuration)
nTimeStep = length( trialTick )
outputs = vector(length = nTimeStep)
for(i in 1 : nTimeStep){
timePoint = trialTick[i]
gammaExp =  (timing - timePoint) / 4
outputs[i] = sum(tokenValue * gamma ^ gammaExp[gammaExp >= 0]) / sum(timing > timePoint )
}
for(i in 1 : nTimeStep){
timePoint = trialTick[i]
gammaExp =  (timing - timePoint) / 4
outputs[i] = sum(tokenValue * gamma ^ gammaExp[gammaExp >= 0]) / sum(timing > timePoint )
}
i
gamma ^ gammaExp[gammaExp >= 0]
gammaExp[gammaExp >= 0]
gammaExp
tokenValue * gamma ^ gammaExp[gammaExp >= 0]
gamma ^ gammaExp[gammaExp >= 0]
for(i in 1 : nTimeStep){
timePoint = trialTick[i]
gammaExp =  (timing - timePoint) / 4
outputs[i] = sum(tokenValue * gamma ^ (gammaExp[gammaExp >= 0])) / sum(timing > timePoint )
}
gamma ^ (gammaExp[gammaExp >= 0])
gamma ^ gammaExp
gammaExp
class( gammaExp)
gamma
gamma = 0.94
outputs = vector(length = nTimeStep)
for(i in 1 : nTimeStep){
timePoint = trialTick[i]
gammaExp =  (timing - timePoint) / 4
outputs[i] = sum(tokenValue * gamma ^ (gammaExp[gammaExp >= 0])) / sum(timing > timePoint )
}
getEV = function(gamma, cIdx){
source('wtwSettings.R')
# get timing input
stepDuration = 0.5
condName = conditionNames[cIdx];
timing = timings[[condName]]
tMax = tMaxs[cIdx]
trialTick = seq(0, tMax, by = stepDuration)
nTimeStep = length( trialTick )
outputs = vector(length = nTimeStep)
for(i in 1 : nTimeStep){
timePoint = trialTick[i]
gammaExp =  (timing - timePoint) / 4
outputs[i] = sum(tokenValue * gamma ^ (gammaExp[gammaExp >= 0])) / sum(timing > timePoint )
}
return(outputs)
}
gamma = 0.94
HP = getEV(0.9, 'HP')
gamma = 0.94
HP = getEV(0.9, 1)
LP = getEV(0.9, 2)
plot(HP)
plot(LP)
plot(HP)
plot(LP)
plot(HP)
plot(LP)
library('ggplot2')
library('dplyr')
library('tidyr')
source('simulate.R') # QStar model
source('wtwSettings.R') # wtw settings for both HP and LP
source('getPara.R') # functions to get MSPara and otherPara from inputs and wtwSettings
source('helperFxs.R')
################ selec condition ################
# cond input
condIdx = 2
cond = conditions[condIdx];
condName = conditionNames[condIdx]
condColor = conditionColors[condIdx]
sprintf('Condition : %s %s', cond, condName)
stepDuration = 0.5
otherPara = getOtherPara(cond, stepDuration)
tMax = otherPara[['tMax']]
trialTick = trialTicks[[condName]]
# initial space
nPara = 5
nValue = 3
tMax = otherPara[['tMax']]
initialSpace = matrix(NA, nValue^nPara, nPara)
initialSpace[,1] = rep(seq(0.2, 0.8, 0.3), each = nValue^(nPara - 1)) # phi
initialSpace[,2] = rep(rep(seq(8,24, 8), each = nValue), nValue^(nPara - 2)) # tau
initialSpace[,3] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^2), nValue^(nPara - 3))
initialSpace[,4] = rep(rep(seq(0.90, 0.98, 0.04), each = nValue^3), nValue^(nPara - 4))
initialSpace[,5] = rep(rep(seq(2, 8, 3), each = nValue^4), nValue^(nPara - 5))
########### simulate #############
combIdx = 160
rIdx = 2
stepDuration = 0.5;
para = initialSpace[combIdx,]
para = initialSpace[combIdx,]
para[3] = 0.90
tempt = QStarModel(para, MSPara, otherPara, cond)
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings,AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
vaWaits = tempt$vaWaits
vaQuits = tempt$vaQuits
wIni = para[5]
gamma = para[3]
nTimeStep = otherPara$tMax / otherPara$stepDuration
vaWaits[is.na(vaWaits[,1]),1] = rep(wIni, sum(is.na(vaWaits[,1])))
vaQuits[is.na(vaQuits[,1]),1] = rep(wIni * gamma ^ (iti / stepDuration),
sum(is.na(vaQuits[,1])))
for(i in 2 : endTick){
vaWaits[is.na(vaWaits[,i]),i] = vaWaits[is.na(vaWaits[,i]),i-1]
vaQuits[is.na(vaQuits[,i]),i] = vaQuits[is.na(vaQuits[,i]),i-1]
}
cIdx = endTick
plotData = data.frame(va =c(vaWaits[,cIdx], vaQuits[,cIdx]),
time = rep( 1 : (otherPara$tMax / otherPara$stepDuration), 2),
action = rep(c('wait', 'quit'),
each = otherPara$tMax / otherPara$stepDuration))
label = sprintf('last, rwd = %d, tw = %.2f; rwd = %d, tw =%.2f',
tempt$trialEarnings[i-1], waitDuration[i-1],
tempt$trialEarnings[i], waitDuration[i])
p = ggplot(plotData, aes(time, va, color = action)) + geom_line() + ggtitle(label) + xlab('step')
# plotData$waitProb = waitProb[,i]
# p = ggplot(plotData[plotData$action == 'wait',], aes(time, waitProb)) + geom_line()+
#   ggtitle(label) + xlim(c(1,3)) + xlab('step')
print(p)
readline(prompt = paste(i, '(hit ENTER to continue)'))
plot(LP)
HP = getEV(0.9, 1)
LP = getEV(0.9, 2)
plot(HP)
plot(LP)
combIdx = 160
rIdx = 2
stepDuration = 0.5;
#  [1] 160 192 195 196 197 198 213 215 217 218 219 220 221 222 223 224 225 226 227
# 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243
para = initialSpace[combIdx,]
para[3] = 0.90
para[5] = 1
tempt = QStarModel(para, MSPara, otherPara, cond)
# summarise earnings, AUC, wtw
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings,AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
para = initialSpace[combIdx,]
para[3] = 0.90
para[5] = 1
tempt = QStarModel(para, MSPara, otherPara, cond)
# summarise earnings, AUC, wtw
totalEarnings = sum(tempt$trialEarnings)
waitDuration = tempt$timeWaited
rewardDelay = tempt$rewardDelays
quitIdx = (tempt$trialEarnings == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults =  kmscSimple(waitDuration, quitIdx, tMax, trialTick)
AUC = kmscResults$auc
label = sprintf('earn: %d, AUC: %.2f',
totalEarnings,AUC)
# plot trialData
blockData = data.frame(trialEarnings = tempt$trialEarnings,
scheduledWait = tempt$rewardDelays,
timeWaited = tempt$timeWaited,
trialNum = 1 : length(tempt$timeWaited)
)
endTick = match(0, tempt$rewardDelays) - 1
blockData = blockData[1:endTick, ]
trialPlots(blockData, label)
# plot survival
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
# check ws
#
vaWaits = tempt$vaWaits
vaQuits = tempt$vaQuits
wIni = para[5]
gamma = para[3]
nTimeStep = otherPara$tMax / otherPara$stepDuration
vaWaits[is.na(vaWaits[,1]),1] = rep(wIni, sum(is.na(vaWaits[,1])))
vaQuits[is.na(vaQuits[,1]),1] = rep(wIni * gamma ^ (iti / stepDuration),
sum(is.na(vaQuits[,1])))
for(i in 2 : endTick){
vaWaits[is.na(vaWaits[,i]),i] = vaWaits[is.na(vaWaits[,i]),i-1]
vaQuits[is.na(vaQuits[,i]),i] = vaQuits[is.na(vaQuits[,i]),i-1]
}
for(i in 2 : endTick){
cIdx = i
plotData = data.frame(va =c(vaWaits[,cIdx], vaQuits[,cIdx]),
time = rep( 1 : (otherPara$tMax / otherPara$stepDuration), 2),
action = rep(c('wait', 'quit'),
each = otherPara$tMax / otherPara$stepDuration))
label = sprintf('last, rwd = %d, tw = %.2f; rwd = %d, tw =%.2f',
tempt$trialEarnings[i-1], waitDuration[i-1],
tempt$trialEarnings[i], waitDuration[i])
p = ggplot(plotData, aes(time, va, color = action)) + geom_line() + ggtitle(label) + xlab('step')
# plotData$waitProb = waitProb[,i]
# p = ggplot(plotData[plotData$action == 'wait',], aes(time, waitProb)) + geom_line()+
#   ggtitle(label) + xlim(c(1,3)) + xlab('step')
print(p)
readline(prompt = paste(i, '(hit ENTER to continue)'))
}
