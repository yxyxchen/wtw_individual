rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
plotTrialData = F
plotKMSC= F
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
quikQuit =
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
condIdx = 2
cond = conditions[condIdx]
condName = conditionNames[condIdx]
inputColp = if(condName == 'HP') inputColp = colpHPData else inputColp = colpLPData
inputRaw = if(condName == 'HP') inputRaw = rawHPData else inputRaw = rawLPData
tMax = tMaxs[condIdx]
trialTick = trialTicks[[condIdx]] # so here if use [2] then get a list
# choose combs you want to plot
nCombList = which(initialSpace[,2] == 8)
nCombList = which(inputColp$totalEarnings < 250)
plotTrialData = F
plotKMSC= F
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
quikQuit =
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
nCombList = which(initialSpace[,2] == 8)
nCombList = which(inputColp$totalEarnings < 250)
plotTrialData = F
plotKMSC= F
drawTimeSample = T
which(inputColp$totalEarnings < 250)
plotTrialData = T
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
quikQuit =
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
nCombList  = 1 : nComb
plotKMSC= F
drawTimeSample = F
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
quikQuit =
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
plotTrialData = F
plotKMSC= T
drawTimeSample = T
for (nCb in 1 : length(nCombList)){
i = nCombList[nCb]
j = 1
# prepare total earnings, wtw and AUC
totalEarnings = inputColp$totalEarnings[i]
wtw = inputColp$wtw[i]
AUC = inputColp$AUC[i]
quikQuit =
label = sprintf('colp stat, earn: %d, wtw: %.2f, AUC: %.2f',
totalEarnings, wtw, AUC)
if(plotTrialData){
# prepare trialData
blockData = data.frame(trialEarnings = inputRaw$trialEarnings[i,j,],
scheduledWait = inputRaw$rewardDelays[i,j,],
timeWaited = inputRaw$timeWaited[i,j,],
trialNum = 1 : length(inputRaw$timeWaited[i,j,])
)
endTick = match(0, inputRaw$rewardDelays[i,j,]) - 1
blockData = blockData[1:endTick, ]
# plot
trialPlots(blockData, label)
}
if(plotTrialData) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
## look at kmsc
if(plotKMSC){
waitDuration = inputRaw$timeWaited[i, j, ]
rewardDelay = inputRaw$rewardDelays[i, j, ]
quitIdx = (inputRaw$trialEarnings[i, j, ] == 0)
waitDuration[is.na(waitDuration)] = rewardDelay[is.na(waitDuration)]
endTick = match(0,rewardDelay)
waitDuration = waitDuration[1 : (endTick - 1)]
quitIdx = quitIdx[1 : (endTick - 1)]
kmscResults = kmscSimple(waitDuration, quitIdx, tMax, trialTick)
plotData = data.frame(pSurvival = kmscResults$kmOnGrid, time = trialTicks[[condName]])
p = ggplot(plotData, aes(time, pSurvival)) + geom_line() + ylim(c(0, 1)) + displayTheme +
ggtitle(label)
print(p)
}
if(plotKMSC) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
### draw wait duration distribution
if(drawTimeSample){
# prepare pdf
cdf = 1 - kmscResults$kmOnGrid;
cdf[length(cdf)] = 1
pdf = diff(c(0, cdf)) # hre 0 is the time tick before 0
#
draws = sample(trialTicks[[condName]], size = 1000, replace = TRUE, prob = pdf)
p = ggplot(data.frame(draws),aes(draws)) + geom_histogram(bins = 50) + xlim(c(0 - 1, tMax+3)) +
displayTheme + xlab('Wait duration / s') + ggtitle(label)
print(p)
}
if(any(drawTimeSample)) {
readline(prompt = paste(nCb, '(hit ENTER to continue)'))
}
}
rm(list = ls())
# outFile
outFile = 'QStar_figures'
# library
library("ggplot2")
library("dplyr")
library("tidyr")
library('scales')
source('plotTheme.R')
source('wtwSettings.R')
# initialSpace
load('QStarData/initialSpace.RData')
####
load('QStarData/colpData.RData')
load('QStarData/rawWTW.RData')
load('QStarData/hdrData.RData')
####
####### plot distribution of totalEarnings
plotData = data.frame(totalEarnings = c(colpHPData$totalEarnings, colpLPData$totalEarnings),
condition = rep(c("HP", "LP"), each = nComb), phi = initialSpace[,1],
tau = initialSpace[,2], gamma = initialSpace[,3],
lambda = initialSpace[,4], wIni = initialSpace[,5]
)
ggplot(plotData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = file.path(outFile, 'earningSml.pdf')
ggsave(fileName, width = 16, height = 8)
plotData = rbind(as.data.frame(colpHPData[c(1,5,6,7)]),
as.data.frame(colpLPData[c(1,5,6,7)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare.pdf")
ggsave(fileName, width = 12, height = 8)
#### plot AUCLP and earningsLP
plotData = rbind(as.data.frame(colpHPData[c(1,5,6,7)]),
as.data.frame(colpLPData[c(1,5,6,7)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
ggplot(plotData, aes(condition, AUC)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "acuCompare.pdf")
ggsave(fileName, width = 12, height = 8)
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point() +
saveTheme + ylab('Total earnings')
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
ggsave(fileName, width = 6, height = 4)
#### wtw
ggplot(plotData, aes(condition, wtw)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + saveTheme
fileName = file.path(outFile, "wtwCompare.pdf")
ggsave(fileName, width = 12, height = 8)
### timeWaited
ggplot(plotData, aes(condition, timeWaited)) + geom_jitter(aes(color =  earningRank ), size = 4) +
scale_color_gradient(low="red", high="yellow", name = 'Earning ranking') +
geom_segment(aes(x= 0.7, xend = 1.3, y=optimWaitTimes$HP,yend=optimWaitTimes$HP), size = 2) +
geom_segment(aes(x= 1.7, xend = 2.3, y=optimWaitTimes$LP,yend=optimWaitTimes$LP), size = 2) + displayTheme
fileName = file.path(outFile, "timeWaited.pdf")
ggsave(fileName, width = 12, height = 8)
#### check immediete quit
# HP
a = (rawHPData$timeWaited == 0) & (rawHPData$rewardDelays != 0)
sum(a[!is.na(a)]) / 5 / 243
endTicks = apply(rawHPData$rewardDelays, MARGIN = c(1,2),
FUN = function(x) match(0, x) - 1)
sum(a[!is.na(a)]) / (5 * 243 * mean(endTicks))
# LP
a = (rawLPData$timeWaited == 0) & (rawLPData$rewardDelays != 0)
sum(a[!is.na(a)]) / 5 / 243
endTicks = apply(rawLPData$rewardDelays, MARGIN = c(1,2),
FUN = function(x) match(0, x) - 1)
sum(a[!is.na(a)]) / 5 / 243 / mean(endTicks)
#### check wtw change
# HP
meanValues = c(apply(rawWTW$HP, MARGIN = 3, FUN = mean),
apply(rawWTW$LP, MARGIN = 3, FUN = mean))
stdValues = c(apply(rawWTW$HP, MARGIN = 3, FUN = sd),
apply(rawWTW$LP, MARGIN = 3, FUN = sd))
plotData = data.frame(meanValues, stdValues,
time = rep(tGrid, time = 2),
condition = rep(c('HP', 'LP'), each = length(tGrid)),
minValues = meanValues - stdValues / sqrt(dim(rawWTW$HP)[1]),
maxValues = meanValues + stdValues / sqrt(dim(rawWTW$HP)[1]))
ggplot(plotData, aes(time, meanValues, color = condition)) +
geom_ribbon(data = plotData[plotData$condition == 'HP',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_ribbon(data = plotData[plotData$condition == 'LP',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_line(size = 1) + xlab('Time in block / s') + ylab('WTW / s') + saveTheme
fileName = file.path(outFile, "wtwTimeSeries.pdf")
ggsave(fileName, width = 12, height = 8)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(plotData$HPAUC, plotData$LPAUC)) + geom_point()
ggplot(plotData, aes(plotData$HPAUC, plotData$LPAUC)) + geom_point(shape = x)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(plotData$HPAUC, plotData$LPAUC)) + geom_point(shape = 2)
# check out how the model responde to environments
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(plotData$HPAUC, plotData$LPAUC)) + geom_point(shape =3 )
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(plotData$HPAUC, plotData$LPAUC)) + geom_point(shape = 3 ) +
geom_point(data = c(optimWaitTimes$HP,optimWaitTimes$LP))
# check out how the model responde to environments
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
# check out how the model responde to environments
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(plotData$HPAUC, plotData$LPAUC)) + geom_point(shape = 3 ) +
geom_point(data = data.frame(optimWaitTimes$HP,optimWaitTimes$LP), color = 'red', shape = 1)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(plotData$HPAUC, plotData$LPAUC)) + geom_point(shape = 3 ) +
geom_point(data = data.frame(HPAUC = optimWaitTimes$HP, LPAUC = optimWaitTimes$LP),
aes()color = 'red', shape = 1)
# check out how the model responde to environments
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) +
geom_point(data = data.frame(HPAUC = optimWaitTimes$HP, LPAUC = optimWaitTimes$LP),
aes(HPAUC, LPAUC),color = 'red', shape = 1)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 )
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth()
# check out how the model responde to environments
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth(method = lm)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth(method = lm) +
xlab('HP AUC/s') + ylab("LP AUC /s")
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth(method = lm) +
xlab('HP AUC/s') + ylab("LP AUC /s") + saveTheme
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth(method = lm) +
xlab('HP AUC/s') + ylab("LP AUC /s") + saveTheme
fileName = file.path(outFile, "responsiveness.pdf")
ggsave(filename, width = 8, height = 8)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth(method = lm) +
xlab('HP AUC/s') + ylab("LP AUC /s") + saveTheme
fileName = file.path(outFile, "responsiveness.pdf")
ggsave(fileName, width = 8, height = 8)
